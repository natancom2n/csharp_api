Diferenca de Dotnet ou Dornet Core?
  a) Dotnet Framework funciona somente em windows 
  b) Dotnet Core atualizacao para funcionar em outros OS alem de:
    atualizar mais rapido
    updates a todo momento
    multi plataforma
    sem obrigatoriedade de utilizar o Visual Studio 
    funciona em um docker
    perfomatico
    suporte a cloud
    configuracoes sao em json


1) PORTAS: Para modificar as portas acesse dentro de Properties, arquivo launchSettings.json
    e modificar 

    "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:3000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:3001;http://localhost:3000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
2) Dotnet watch run 
3) END POINT:
    Padrões: 
        app.MapGet("/", () => "Hello World!");
        app.MapGet("/user", () => "Natan");
        app.MapPost("/user", () => "Natan Post");

        A. Modificar Header ( response):
        app.MapGet("/Add", (HttpResponse response) => response.Headers.Add("Teste", "Natan Alves"));

        B. Usando o exemplo acima enviando também o body:
        app.MapGet("/Add", (HttpResponse response) =>
            {
                response.Headers.Add("Teste", "Natan Alves");
                return new { Name = "Natan Alves", Age = 40 };
            });
        
        C. Enviando (post) via Query:
            //api.app.com/users?datastart={date}&dataend={date}
            app.MapGet("/getproduct", ([FromQuery] string dateStart, [FromQuery] string dateEnd)=> {
                return dateStart + " + " + dateEnd;
            });
            //url exemplo: http://localhost:3000/getproduct?datestart=x&dateend=y
        
        D. Enviados (post) via Route:
            //api.app.com/users/{code}
            app.MapGet("/getproduct{code}", ([FromRoute]string code)=> {
              return code;
            });
            //url exemplo: http://localhost:3000/getproduct{x}  

        E. Enviando parametros via Header ( request ):
            app.MapGet("/getproducts", (HttpRequest req) =>  {
                return req.Headers["code"].ToString();
            });

4) CRUD ( sem DB ):
  Crear repositorio ProductRepo:

      public class ProductRepo{
        public Lista<Product> Products  { get; set; }
        public void Add(Product product){
            if (Products == null )
                Products = new List<Product>();   
            Products.Add(product); 
        }
        public Product GetBy(string code){
            return Products.First(p => p.code == code);
        }
    }
  
